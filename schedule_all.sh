#!/bin/bash
# this code has been copied and pasted from the NOAA instructables by haslettj and then heavilt modified by James Monaco and Isaac Savona. Last Edited 12/20/2020
# This script is designed to be run on startup and every night at 12:01am.
# This script creates the required folder structure to orginize all files generated by any satellite pass that happends within the day (local time). 
# Each satellite pass has its own folder within the day folder.
# While the day folder is labeled with the local time and date, each pass and its associated files are labeled in UTC time. 
# This script also schedules other scripts to be run that records, demodulates (if required) and creates images for each pass at the time that they occur.  

#-----------------------------
# Update Satellite Information

wget -qr https://www.celestrak.com/NORAD/elements/weather.txt -O /home/pi/weather/predict/weather.txt 
# wget gets internet stuff and outputs to a specifically named file (-O [name])

grep "NOAA 15" /home/pi/weather/predict/weather.txt -A 2 > /home/pi/weather/predict/weather.tle
grep "NOAA 18" /home/pi/weather/predict/weather.txt -A 2 >> /home/pi/weather/predict/weather.tle
grep "NOAA 19" /home/pi/weather/predict/weather.txt -A 2 >> /home/pi/weather/predict/weather.tle
grep "METEOR-M 2" /home/pi/weather/predict/weather.txt -A 2 >> /home/pi/weather/predict/weather.tle
# grep: regular expression command used to serach for text
# -A [NUM]: prints the matched querey, then the next NUM of lines after the matached querey   
# [STRING] > [file]: writes the STRING to the FILE  
# Similarly: [STRING] >> [FILE]: adds the string to the end of the file WITHOUT overwriting the file

# create the text file sat_queue to record the following info, if it doesn't exist:
#OUTDAY=`date -u +%Y%m%d`
LOCAL_OUTDAY=`date +%Y%m%d`
mkdir -p -- /home/pi/weather/"${LOCAL_OUTDAY}" # make the day folder
if [[ ! -e /home/pi/weather/${LOCAL_OUTDAY}/satellite_queue.txt ]]; then
	echo '[NAME],[CENTER FREQ],[OUTDATE (fmt: Ymd-HMs)],[Start time (fmt: unix)],[TIMER] (fmt: sec),[START TIME (fmt: UTC)],[ELEVATION]' > /home/pi/weather/${LOCAL_OUTDAY}/satellite_queue.txt # ATQ scheduling also relies on OUTDATE
	# this is all the info required to schedule a pass, in the formats required. 
fi

# -----------------
#Remove all AT jobs

for i in `atq | awk '{print $1}'`;do atrm $i;done
# atq is "at queue"
# atrm: "at remove" to delete an 'at' job
# awk is pattern matching: print the first word (here, the first word in an atq job is the job number
# overall, this calls atq and gets the first job number, deletes it, and then goes through until all jobs are deleted

# print header for command-line output
echo "[NAME][UTC DAY]-[UTC TIME] [MAXELEV]"
#Schedule Satellite Passes: (writes satellite_queue.txt)
/home/pi/weather/predict/schedule_satellite.sh "NOAA 19" 137.1000 #argument 1 is satellite name, argument 2 is its center frequency 
/home/pi/weather/predict/schedule_satellite.sh "NOAA 18" 137.9125
/home/pi/weather/predict/schedule_satellite.sh "NOAA 15" 137.6200
/home/pi/weather/predict/schedule_satellite.sh "METEOR-M 2" 137.1000

# using a python script to delete duplicate entries, detect and prioritize conflicting passes. Re-writes satellite_queue.txt
python /home/pi/weather/predict/satellite_prioritize.py "/home/pi/weather/${LOCAL_OUTDAY}/satellite_queue.txt"

# using satellite_queue.txt, creates jobs. 
i=1
PASS_FILE="/home/pi/weather/"${LOCAL_OUTDAY}"/satellite_queue.txt"
while read line; do 
	if [ $i -gt 1 ] 
		then
		NAME=`echo $line | cut -d "," -f 1`
		FREQ=`echo $line | cut -d "," -f 2`
		TIMER=`echo $line | cut -d "," -f 5`
		START_UNIX=`echo $line | cut -d "," -f 4`
		START_UTC=`echo $line | cut -d "," -f 6`
		OUTDATE=`echo $line | cut -d "," -f 3`
		#OUTDAY=`echo $OUTDATE | cut -d "-" -f 1` # this is the UTC date
		# echo "mkdir -p /home/pi/weather/${OUTDAY}/${NAME//" "}${OUTDATE}" | at `date --date="TZ=\"UTC\" $START_UTC" +"%H:%M %D"` # Schedule the creation of the folder for this pass, within the day folder
		mkdir -p -- /home/pi/weather/"${LOCAL_OUTDAY}"/"${NAME//" "}""-""${OUTDATE}" # Create the folder for this pass, within the day folder
		if [ "$NAME" == "METEOR-M 2" ]
			then
				#echo "/home/pi/weather/predict/receive_and_process_meteor.sh \"${NAME}\" $FREQ /home/pi/weather/${OUTDAY}/${NAME//" "}${OUTDATE}/${NAME//" "}${OUTDATE} /home/pi/weather/predict/weather.tle $START_UNIX $TIMER" | at `date --date="TZ=\"UTC\" $START_UTC" +"%H:%M %D"`
				echo "/home/pi/weather/predict/receive_and_process_meteor.sh \"${NAME}\" $FREQ /home/pi/weather/${LOCAL_OUTDAY}/${NAME//" "}"-"${OUTDATE}/${NAME//" "}"-"${OUTDATE} /home/pi/weather/predict/weather.tle $START_UNIX $TIMER" | at `date --date="TZ=\"UTC\" $START_UTC" +"%H:%M %D"`
			else
				echo "/home/pi/weather/predict/receive_and_process_noaa.sh \"${NAME}\" $FREQ /home/pi/weather/${LOCAL_OUTDAY}/${NAME//" "}"-"${OUTDATE}/${NAME//" "}"-"${OUTDATE} /home/pi/weather/predict/weather.tle $START_UNIX $TIMER" | at `date --date="TZ=\"UTC\" $START_UTC" +"%H:%M %D"`
		fi
	fi
i=$((i+1))
done < $PASS_FILE
echo 'SCHEDULE_ALL WAS EXECUTED'
